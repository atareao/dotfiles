--
local wk = require("which-key")

vim.keymap.set('i', '<Right>', 'copilot#Accept("\\<CR>")', {
          expr = true,
          replace_keycodes = false
        })
vim.g.copilot_no_tab_map = true
--vim.g.tabby_keybinding_accept = '<C-e>'
--vim.g.tabby_keybinding_trigger_or_dismiss = '<C-d>'

wk.add({
    {
        mode = "i",
        {"<C-h>", "<left>",  desc = "Movements"},
        {"<C-j>", "<down>",  desc = "Movements"},
        {"<C-k>", "<up>",    desc = "Movements"},
        {"<C-l>", "<right>", desc = "Movements"},
    },
    {
        mode = "n",
        {"<leader>0", "<Plug>(cokeline-focus-0)", desc = "Focus 0"},
        {"<leader>1", "<Plug>(cokeline-focus-1)", desc = "Focus 1"},
        {"<leader>2", "<Plug>(cokeline-focus-2)", desc = "Focus 2"},
        {"<leader>3", "<Plug>(cokeline-focus-3)", desc = "Focus 3"},
        {"<leader>4", "<Plug>(cokeline-focus-4)", desc = "Focus 4"},
        {"<leader>5", "<Plug>(cokeline-focus-5)", desc = "Focus 5"},
        {"<leader>6", "<Plug>(cokeline-focus-6)", desc = "Focus 6"},
        {"<leader>7", "<Plug>(cokeline-focus-7)", desc = "Focus 7"},
        {"<leader>8", "<Plug>(cokeline-focus-8)", desc = "Focus 8"},
        {"<leader>9", "<Plug>(cokeline-focus-9)", desc = "Focus 0"},
        -- ChatGPT
        {
            mode = {"n", "v"},
            {"<leader>c", group="GhatGTP"},
            {"<leader>ca", "<cmd>ChatGPTRun add_tests<CR>",          desc = "Add Tests"},
            {"<leader>cd", "<cmd>ChatGPTRun docstring<CR>",          desc = "Docstring"},
            {"<leader>ce", "<cmd>ChatGPTEditWithInstruction<CR>",    desc = "Edit with instruction"},
            {"<leader>cf", "<cmd>ChatGPTRun fix_bugs<CR>",           desc = "Fix Bugs"},
            {"<leader>cg", "<cmd>ChatGPTRun grammar_correction<CR>", desc = "Grammar Correction"},
            {"<leader>ck", "<cmd>ChatGPTRun keywords<CR>",           desc = "Keywords"},
            {"<leader>cl", "<cmd>ChatGPTRun code_readability_analysis<CR>", desc = "Code Readability Analysis"},
            {"<leader>co", "<cmd>ChatGPTRun optimize_code<CR>",      desc = "Optimize Code"},
            {"<leader>cr", "<cmd>ChatGPTRun roxygen_edit<CR>",       desc = "Roxygen Edit"},
            {"<leader>cs", "<cmd>ChatGPTRun summarize<CR>",          desc = "Summarize"},
            {"<leader>ct", "<cmd>ChatGPTRun translate<CR>",          desc = "Translate"},
            {"<leader>cx", "<cmd>ChatGPTRun explain_code<CR>",       desc = "Explain Code"},
        },
        -- DEBUG
        {"<leader>d", group="Debug"},
        {"<leader>db", "<cmd>lua require'dap'.toggle_breakpoint()<cr>", desc = "Breakpoint"},
        {"<leader>dc", "<cmd>lua require'dap'.continue()<cr>", desc = "Continue"},
        {"<leader>di", "<cmd>lua require'dap'.step_into()<cr>", desc = "Into"},
        {"<leader>do", "<cmd>lua require'dap'.step_over()<cr>", desc = "Over"},
        {"<leader>dO", "<cmd>lua require'dap'.step_out()<cr>", desc = "Out"},
        {"<leader>dr", "<cmd>lua require'dap'.repl.toggle()<cr>", desc = "Repl"},
        {"<leader>dl", "<cmd>lua require'dap'.run_last()<cr>", desc = "Last"},
        {"<leader>dx", "<cmd>lua require'dap'.terminate()<cr>", desc = "Exit"},
        {"<leader>dt", group="Telescope"},
        {"<leader>dtc", "<cmd>lua require'telescope'.extensions.dap.commands{}<CR>"},
        {"<leader>dto", "<cmd>lua require'telescope'.extensions.dap.configurations{}<CR>"},
        {"<leader>dtb", "<cmd>lua require'telescope'.extensions.dap.list_breakpoints{}<CR>"},
        {"<leader>dtv", "<cmd>lua require'telescope'.extensions.dap.variables{}<CR>"},
        {"<leader>dtf", "<cmd>lua require'telescope'.extensions.dap.frames{}<CR>"},
        {"<leader>du", group="Debug UI"},
        {"<leader>dus", "<cmd>lua require'dapui'.setup()<cr>", desc = "Setup" },
        {"<leader>duo", "<cmd>lua require'dapui'.open()<cr>", desc = "Open" },
        {"<leader>duc", "<cmd>lua require'dapui'.close()<cr>", desc = "Close" },
        {"<leader>dut", "<cmd>lua require'dapui'.toggle()<cr>", desc = "Toggle" },
        -- 
        {"<leader>D", "<cmd>lua require'neogen'.generate()<cr>", desc = "Docu"},
        -- FIND
        {"<leader>f", group = "Find/Focus"},
        {"<leader>fb", "<cmd>Telescope buffers<cr>", desc = "Find in buffers" },
        {"<leader>fc", "<cmd>Telescope colorscheme<cr>", desc = "Colorscheme" },
        {"<leader>fd", "<cmd>Telescope gitmoji<cr>", desc = "Gitmoji" },
        {"<leader>fe", "<cmd>Telescope emoji<cr>", desc = "Emojis" },
        {"<leader>ff", "<cmd>Telescope find_files<cr>", desc = "Find File" },
        {"<leader>fg", "<cmd>Telescope live_grep<cr>", desc = "Live grep" },
        {"<leader>fh", "<cmd>Telescope help_tags<cr>", desc = "Help" },
        {"<leader>fi", "<cmd>lua require('telescope').extensions.media_files.media_files()<cr>", desc = "Media" },
        {"<leader>fk", "<cmd>Telescope keymaps<cr>", desc = "Keymaps" },
        {"<leader>fl", "<cmd>Telescope resume<cr>", desc = "Last Search" },
        {"<leader>fn", "<Plug>(cokeline-switch-next)", desc = "Focus next"},
        {"<leader>fo", "<cmd>Telescope file_browser<cr>", desc = "Commands" },
        {"<leader>fp", "<Plug>(cokeline-switch-prev)", desc = "Focus preview"},
        {"<leader>fr", "<cmd>Telescope oldfiles<cr>", desc = "Recent File" },
        {"<leader>fs", "<cmd>Telescope grep_string theme=ivy<cr>", desc = "Find String" },
        {"<leader>ft", "<cmd>Telescope live_grep theme=ivy<cr>", desc = "Find Text" },
        {"<leader>fy", "<cmd>Telescope symbols<cr>", desc = "Symbols" },
        {"<leader>fC", "<cmd>Telescope commands<cr>", desc = "Commands" },
        {"<leader>fM", "<cmd>Telescope man_pages<cr>", desc = "Man Pages" },
        {"<leader>fR", "<cmd>Telescope registers<cr>", desc = "Registers" },
        -- GIT
        {"<leader>g", group = "Find/Git"},
        {"<leader>gg", "<cmd>LazyGit<cr>", desc = "Lazygit" },
        {"<leader>gj", "<cmd>lua require 'gitsigns'.next_hunk()<cr>", desc = "Next Hunk" },
        {"<leader>gk", "<cmd>lua require 'gitsigns'.prev_hunk()<cr>", desc = "Prev Hunk" },
        {"<leader>gl", "<cmd>GitBlameToggle<cr>", desc = "Blame" },
        {"<leader>gm", "<cmd>Telescope gitmoji<cr>", desc = "Git emoji" },
        {"<leader>gp", "<cmd>lua require 'gitsigns'.preview_hunk()<cr>", desc = "Preview Hunk" },
        {"<leader>gr", "<cmd>lua require 'gitsigns'.reset_hunk()<cr>", desc = "Reset Hunk" },
        {"<leader>gR", "<cmd>lua require 'gitsigns'.reset_buffer()<cr>", desc = "Reset Buffer" },
        {"<leader>gs", "<cmd>lua require 'gitsigns'.stage_hunk()<cr>", desc = "Stage Hunk" },
        {"<leader>gu", "<cmd>lua require 'gitsigns'.undo_stage_hunk()<cr>", desc = "Undo Stage Hunk", },
        {"<leader>go", "<cmd>Telescope git_status<cr>", desc = "Open changed file" },
        {"<leader>gb", "<cmd>Telescope git_branches<cr>", desc = "Checkout branch" },
        {"<leader>gc", "<cmd>Telescope git_commits<cr>", desc = "Checkout commit" },
        {"<leader>gd", "<cmd>Gitsigns diffthis HEAD<cr>", desc = "Diff" },
        {"<leader>gi", "<cmd>SidebarNvimToggle<cr>", desc = "Toggle sidebar" },
        -- LSP
        {"<leader>l", group = "LSP"},
        {"<leader>la", "<cmd>lua vim.lsp.buf.code_action()<cr>", desc = "Code Action" },
        {"<leader>lw", "<cmd>Telescope lsp_workspace_diagnostics<cr>", desc = "Workspace Diagnostics" },
        {"<leader>lf", "<cmd>lua vim.lsp.buf.format({ async = true })<cr>", desc = "Format" },
        {"<leader>lF", "<cmd>LspToggleAutoFormat<cr>", desc = "Toggle Autoformat" },
        {"<leader>ld", "<cmd>lua vim.lsp.buf.definition()<cr>", desc = "Definition"},
        {"<leader>lG", "<cmd>lua vim.lsp.buf.declaration()<cr>", desc = "Declaration"},
        {"<leader>li", "<cmd>lua vim.lsp.buf.implementation()<cr>", desc = "Declaration"},
        {"<leader>li", "<cmd>LspInfo<cr>", desc = "Info" },
        {"<leader>lI", "<cmd>LspInstallInfo<cr>", desc = "Installer Info" },
        {"<leader>lh", "<cmd>lua vim.lsp.buf.hover()<cr>", desc = "Hover"},
        {"<leader>lj", "<cmd>lua vim.diagnostic.goto_next({buffer=0})<CR>", desc = "Next Diagnostic", },
        {"<leader>lk", "<cmd>lua vim.diagnostic.goto_prev({buffer=0})<cr>", desc = "Prev Diagnostic", },
        {"<leader>lK", "<cmd>lua vim.lsp.buf.hover()<cr>", desc = "Hover"},
        {"<leader>ll", "<cmd>lua vim.lsp.codelens.run()<cr>", desc = "CodeLens Action" },
        {"<leader>lo", "<cmd>SymbolsOutline<cr>", desc = "Outline" },
        {"<leader>lq", "<cmd>lua vim.lsp.diagnostic.set_loclist()<cr>", desc = "Quickfix" },
        {"<leader>lr", "<cmd>lua vim.lsp.buf.rename()<cr>", desc = "Rename" },
        {"<leader>lR", "<cmd>TroubleToggle lsp_references<cr>", desc = "References" },
        {"<leader>ls", "<cmd>Telescope lsp_document_symbols<cr>", desc = "Document Symbols" },
        {"<leader>lS", "<cmd>lua vim.lsp.buf.signature_help()<cr>", desc = "Signature", },
        {"<leader>lu", "<cmd>LuaSnipUnlinkCurrent<cr>", desc = "Unlink Snippet" },
        {"<leader>lx", "<cmd>TroubleToggle<cr>", desc = "Diagnostics" },
        --
        {"<leader>n", "<md>nohl<cr>", desc="Clearing search highlighting"},
        -- TROUBLE
        {"<leader>x", group = "Trouble"},
        {"<leader>xd", "<cmd>Trouble lsp toggle focus=false win.position=right<cr>", desc = "Definitions"},
        {"<leader>xl", "<cmd>Trouble loclist toggle<cr>", desc = "List"},
        {"<leader>xq", "<cmd>Trouble qflist toggle<cr>", desc = "Quickfix"},
        {"<leader>xs", "<cmd>Trouble symbols toggle focus=false<cr>", desc = "Symbols"},
        {"<leader>xx", "<cmd>Trouble diagnostics toggle<cr>", desc = "Diagnostics"},
        {"<leader>xX", "<cmd>Trouble diagnostics toggle filter.buf=0<cr>", desc = "Buffer Diagnostics"},
        --
        {"<C-h>", "<C-w>h", desc = "Movements"},
        {"<C-j>", "<C-w>j", desc = "Movements"},
        {"<C-k>", "<C-w>k", desc = "Movements"},
        {"<C-l>", "<C-w>l", desc = "Movements"},
        {"<C-g>", "<cmd> LazyGit<cr>", desc = "Open LazyGit"},
        {"<C-n>", "<cmd> Neotree toggle<cr>", desc = "Toggle Neotree"},
        {"<C-7>", "<cmd> Telescope command_palette<cr>", desc =  "Paleta de comandos"},
        {"<C-q>", "<cmd> Vista!!<cr>", desc =  "Vista"},
        {"<C-s>", "<cmd> SidebarNvimToggle<cr>", desc =  "Vista"},
        {"<C-t>", "<cmd>ToggleTerm<cr>", desc =  "Toggle terminal"},
        {"<bs>", ":edit #<cr>", desc =  "Hacia atrás"},
    }
})
