set encoding=utf-8
let g:ale_disable_lsp = 1
" Auto installation of Plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
" Plugins
call plug#begin('~/.vim/plugged')
" -------------------------------
" Airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" surround
Plug 'tpope/vim-surround'
" CSV
Plug 'chrisbra/csv.vim'
" markdown
Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
" Autocomplete
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Bash
Plug 'kovetskiy/vim-bash', {'for': 'sh'}
" Rust
Plug 'vim-test/vim-test'
Plug 'rust-lang/rust.vim'
" Python
Plug 'dense-analysis/ale'
Plug 'davidhalter/jedi-vim', {'for': 'python'}
" Git integration
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
" Code and files fuzzy finder
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" Change cursor in Insert and Replace
Plug 'wincent/terminus'
" Color scheme
Plug 'ayu-theme/ayu-vim'
" Listas todo
Plug 'aserebryakov/vim-todo-lists'
" -------------------------------
call plug#end()
" Commands to manage Plug:
" ------------------------
" PlugInstall  [name ...] [#threads]     Install plugins
" PlugUpdate   [name ...] [#threads]      Install or update plugins
" PlugClean[!] Remove unlisted plugins (bang version will clean without prompt)
" PlugUpgrade  Upgrade vim-plug itself
" PlugStatus   Check the status of plugins
" PlugDiff     Examine changes from the previous update and the pending changes
" PlugSnapshot[!] [output path] Generate script for restoring the current
"                               snapshot of the plugins
" ==== Configuration for Plugins ====
" Required for operations modifying multiple buffers like rename.
set hidden

let g:LanguageClient_serverCommands = {
    \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
    \ 'javascript': ['/usr/local/bin/javascript-typescript-stdio'],
    \ 'javascript.jsx': ['tcp://127.0.0.1:2089'],
    \ 'python': ['/usr/local/bin/pyls'],
    \ 'ruby': ['~/.rbenv/shims/solargraph', 'stdio'],
    \ }

" note that if you are using Plug mapping you should not use `noremap` mappings.
nmap <F5> <Plug>(lcn-menu)
" Or map each action separately
nmap <silent>K <Plug>(lcn-hover)
nmap <silent> gd <Plug>(lcn-definition)
nmap <silent> <F2> <Plug>(lcn-rename)
" ------------- coc -----------------
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
				\: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
let g:coc_global_extensions = ['coc-emoji', 'coc-git', 'coc-python']
" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" ------------- ale -----------------
let g:ale_linters = {
      \   'python': ['flake8', 'pylint', 'pyflakes', 'mypy', 'pydocstyle'],
      \}
let g:ale_fixers = {
      \    'python': ['yapf'],
      \}
nmap <F10> :ALEFix<CR>
let g:ale_fix_on_save = 1
function! LinterStatus() abort
  let l:counts = ale#statusline#Count(bufnr(''))

  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors

  return l:counts.total == 0 ? '‚ú® all good ‚ú®' : printf(
        \   'üòû %dW %dE',
        \   all_non_errors,
        \   all_errors
        \)
endfunction

set statusline=
set statusline+=%m
set statusline+=\ %f
set statusline+=%=
set statusline+=\ %{LinterStatus()}
" ------------- csv -----------------
let g:csv_delim=';'
let g:csv_highlight_column = 'y'
let g:csv_comment = '#'
let b:csv_arrange_align = 'l*'
"----------- vim-markdown -----------
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
" ---------------- gitgutter ------------
nmap ]g <Plug>(GitGutterNextHunk)
nmap [g <Plug>(GitGutterPrevHunk)
" -------------- Airline ---------------
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_symbols.branch = '‚éá'
let g:airline_symbols.paste = 'œÅ'
let g:airline_symbols.whitespace = 'Œû'
" -------------- Fuzzy Finder ---------------
command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, {'options': ['--preview', '--info=inline']}, <bang>0)
" Jedi-vim ------------------------------
let g:jedi#use_tabs_not_buffers = 1
let g:jedi#use_splits_not_buffers = "right"
" -------------- template --------------
augroup templates
    au!
    let g:template_name = 'Lorenzo Carbonell <a.k.a. atareao>'
    autocmd BufNewFile *.* silent! execute '0r $HOME/.vim/templates/'.expand("<afile>:e").'.tpl'
    autocmd BufNewFile * %s/{{YEAR}}/\=strftime('%Y')/ge
    autocmd BufNewFile * %s/{{NAME}}/\=template_name/ge
    autocmd BufNewFile * %s/{{EVAL\s*\([^}]*\)}}/\=eval(submatch(1))/ge
augroup END
" -------------- personal ---------------
set splitright
set splitbelow
" ---- Color theme -----
" important!!
if has('termguicolors')
    set termguicolors
endif
" The configuration options should be placed before `colorscheme sonokai`.
let ayucolor="dark"
colorscheme ayu

" Relative number
set number relativenumber

" Line wrap
set wrap linebreak nolist

" Highlight search
set incsearch
set hlsearch
set ignorecase
set smartcase

" Show column 80
if exists('+colorcolumn')
    set colorcolumn=80
else
    au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" Show ruler
set ruler

"Run Python from Vim
autocmd FileType python map <buffer> <F5> :w<CR>:exec '!python3' shellescape(@%, 1)<CR>
autocmd FileType python imap <buffer> <F5> <esc>:w<CR>:exec '!python3' shellescape(@%, 1)<CR>
setlocal ts=4 sts=4 sw=4 expandtab
"add yaml stuffs
au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml foldmethod=indent
au! BufRead, BufNewFile *.json set filetype=javascript
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab indentkeys-=0# indentkeys-=<:> foldmethod=indent nofoldenable
augroup filetype_markdown
    autocmd!
    autocmd FileType markdown setlocal ts=4 sts=4 sw=4 expandtab indentkeys-=0# indentkeys-=<:> foldmethod=indent nofoldenable
    autocmd FileType markdown let b:coc_suggest_disable = 1
augroup END
autocmd FileType javascript setlocal ts=4 sts=4 sw=4 expandtab
" Plegado
set foldmethod=manual
set foldmethod=syntax "syntax highlighting items specify folds
set foldcolumn=1 "defines 1 col at window left, to indicate folding
let javaScript_fold=1 "activate folding by JS syntax
set foldlevelstart=99 "start file with all folds opened
" Colors
set nocompatible
filetype plugin on
syntax on
"set syntax=gray
"set notermguicolors

setlocal spell spelllang=es
hi SpellBad ctermfg=015 ctermbg=009 cterm=bold

" Show spaces
" set list
" show leading spaces
hi Conceal guibg=NONE ctermbg=NONE ctermfg=DarkGray
autocmd BufRead * setlocal conceallevel=2 concealcursor=nv
autocmd BufRead * syn match LeadingSpace /\(^ *\)\@<= / containedin=ALL conceal cchar=¬∑

set cursorcolumn
set cursorline
"-------- Configure netrw ----------
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 25
" Toggle Vexplore with Ctrl-E
function! ToggleVExplorer()
  if exists("t:expl_buf_num")
      let expl_win_num = bufwinnr(t:expl_buf_num)
      if expl_win_num != -1
          let cur_win_nr = winnr()
          exec expl_win_num . 'wincmd w'
          close
          exec cur_win_nr . 'wincmd w'
          unlet t:expl_buf_num
      else
          unlet t:expl_buf_num
      endif
  else
      exec '1wincmd w'
      Vexplore
      let t:expl_buf_num = bufnr("%")
  endif
endfunction
map <silent> <C-E> :call ToggleVExplorer()<CR>
let g:netrw_altv=1
" ================================= Mappings =================================
let mapleader=','

" ---- Jedi-vim ----
let g:jedi#rename_command = '<leader>R' " Rename
let g:jedi#goto_command = '<leader>d' " Go to definition
let g:jedi#usages_command = '<leader>o' " Find ocurrences
let g:jedi#goto_assignments_command = '<leader>a' " Find assignments
" ---- Fuzzy Finder ----
nnoremap <leader>e :GFiles<CR>
nnoremap <leader>l :Lines<CR>
nnoremap <leader>m :History<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>W :Windows<CR>
" ---- Fugitive ----
nnoremap gf :Gdiffsplit<CR>
nnoremap gdh :diffget //2<CR>
nnoremap gdl :diffget //3<CR>
" ---- Remap arrow keys ----
cnoremap <Down> <Nop>
cnoremap <Left> <Nop>
cnoremap <Right> <Nop>
cnoremap <Up> <Nop>
cnoremap <C-j> <Down>
cnoremap <C-k> <Up>
cnoremap <C-h> <Left>
cnoremap <C-l> <Right>
inoremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>
inoremap <Up> <Nop>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-h> <Left>
inoremap <C-l> <Right>
nnoremap <Down> <Nop>
nnoremap <Left> <Nop>
nnoremap <Right> <Nop>
nnoremap <Up> <Nop>
vnoremap <Down> <Nop>
vnoremap <Left> <Nop>
vnoremap <Right> <Nop>
vnoremap <Up> <Nop>
vnoremap <C-j> <Down>
vnoremap <C-k> <Up>
vnoremap <C-h> <Left>
vnoremap <C-l> <Right>

" ---- Macros ----
let @w='_df"f?df>dfÄ˝adt<_i[P](Ä˝af<d$a)Ä˝a_iImagen de portada de Ä˝a$aÄ˝a'

" ---- Backup ----
" Put all temporary files under the same directory.
" https://github.com/mhinz/vim-galore#handling-backup-swap-undo-and-viminfo-files
set backup
set backupdir   =$HOME/.vim/files/backup/
set backupext   =-vimbackup
set backupskip  =
set directory   =$HOME/.vim/files/swap/
set updatecount =100
set undofile
set undodir     =$HOME/.vim/files/undo/
set viminfo     ='100,n$HOME/.vim/files/info/viminfo
