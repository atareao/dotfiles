#!/usr/bin/env bash
# -*- coding: utf-8 -*-

# Copyright (c) 2021 Lorenzo Carbonell <a.k.a. atareao>

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

function publish(){
    repository="$1"
    action="$2"
    data="$3"
    result=""
    ok="$4"
    while read line;do
        if [[ -z $result ]]; then
            result=$(echo "${line}" | tr '"' "'")
        else
            result="${result}|${line}"
        fi
    done< <(echo $data)
    echo $output
    curl -X 'POST' \
        "https://{{ env.ZINCOBSERVE_URL }}/api/default/archi_backup/_json" \
        -H "accept: application/json" \
        -H "Authorization: Basic {{ env.ZINCOBSERVE_TOKEN }}" \
        -H "Content-Type: application/json" \
        -d "[
                {
                    \"repository\": \"${repository}\",
                    \"action\": \"${action}\",
                    \"ok\": \"${ok}\",
                    \"result\": \"${result}\"
                }
            ]"
}

export RESTIC_PASSWORD="{{ env.RESTIC_PASSWORD }}"
export AWS_ACCESS_KEY_ID="{{ env.AWS_ACCESS_KEY_ID }}"
export AWS_SECRET_ACCESS_KEY="{{ env.AWS_SECRET_ACCESS_KEY }}"
{% if env.MACHINE == "archi" -%}
{% set CUSTOM_HOME = "/home/lorenzo" -%}
REPO1="local:/data/resticbackup"
REPO2="s3:https://{{ env.RESTIC_S3_SERVER }}/restic-archi"
REPO3="s3:https://{{ env.RESTIC_S3_ONE_SERVER }}/restic-one"
{% elif env.MACHINE == "termux" -%}
{% set CUSTOM_HOME = "/data/data/com.termux/files/home" -%}
REPO1="local:{{ CUSTOM_HOME }}/storage/backup/restic"
REPO2="s3:https://{{ env.RESTIC_S3_SERVER }}/restic-termux"
REPO3="s3:https://{{ env.RESTIC_S3_ONE_SERVER }}/restic-termux"
{% endif -%}
REPOS=("$REPO1" "$REPO2" "$REPO3")

for REPO in "${REPOS[@]}"
do
    echo "=== Start backup at $REPO ==="
    create_output=$(restic -r "$REPO" backup             \
                  --verbose                              \
                  --skip-if-unchanged                    \
{%- if env.MACHINE == "archi" %}
                  /data/ansible                          \
                  /data/appimage                         \
                  /data/atareao.es                       \
                  /data/bash                             \
                  /data/dockers                          \
                  /data/flatpak                          \
                  /data/gnome                            \
                  /data/javascript                       \
                  /data/notes                            \
                  /data/php                              \
                  /data/podcasts                         \
                  /data/python                           \
                  /data/rust                             \
                  /data/secreto                          \
                  /data/semaphore                        \
                  /data/typescript                       \
                  /data/typst                            \
                  /data/VÃ­deos                           \
{%- elif env.MACHINE == "termux" %}
                  {{ CUSTOM_HOME }}/.termux              \
                  {{ CUSTOM_HOME }}/notas                \
                  {{ CUSTOM_HOME }}/storage/audiobooks   \
                  {{ CUSTOM_HOME }}/storage/documents    \
{%- endif %}
                  {{ CUSTOM_HOME }}/.password-store      \
                  {{ CUSTOM_HOME }}/.ssh                 \
                  {{ CUSTOM_HOME }}/.config              \
                  {{ CUSTOM_HOME }}/.gnupg               \
                  --exclude '*.aup'                      \
                  --exclude '*.au'                       \
                  --exclude '*.mkv'                      \
                  --exclude '*.mp3'                      \
                  --exclude '/data/**/venv/'             \
                  --exclude '/data/**/target/'           \
                  --exclude '/data/**/.venv/'            \
                  --exclude '/data/**/.git/'             \
                  --exclude '/data/**/.pnpm/'            \
                  --exclude '/data/**/.cargo/'           \
                  --exclude '/data/**/__pycache__/')
    ok=$?
    publish "${REPOSITORY}" "create" "${create_output}" "${ok}"
    echo "$create_output"
    echo "=== End backup at $REPO ==="
done
for REPO in "${REPOS[@]}"
do
    echo "=== Start check $REPO ==="
    check_output=$(restic -r "$REPO" check)
    ok=$?
    publish "${REPOSITORY}" "check" "${check_output}" "${ok}"
    echo "$create_output"
    echo "=== End check $REPO ==="
done
for REPO in "${REPOS[@]}"
do
    echo "=== Start prune $REPO ==="
    prune_output=$(restic -r "$REPO" forget             \
                  --prune                               \
                  --keep-daily 7                        \
                  --keep-weekly 4                       \
                  --keep-monthly 6)
    ok=$?
    publish "${REPOSITORY}" "prune" "${prune_output}" "${ok}"
    echo "=== End prune $REPO ==="
done
for REPO in "${REPOS[@]}"
do
    echo "=== Start list $REPO ==="
    snapshots_output=$(restic -r "$REPO" snapshots -c)
    ok=$?
    publish "${REPOSITORY}" "snapshots" "${snapshots_output}" "${ok}"
    echo "=== End prune $REPO ==="
done
